{"failedCount":1,"prefixedPath":"src\/test\/java\/acceptance\/test\/prueba-tecnica.feature","packageQualifiedName":"src.test.java.acceptance.test.prueba-tecnica","loopIndex":-1,"relativePath":"src\/test\/java\/acceptance\/test\/prueba-tecnica.feature","scenarioResults":[{"sectionIndex":0,"stepResults":[{"result":{"nanos":87523200,"millis":87.5232,"status":"passed"},"step":{"background":true,"line":5,"prefix":"*","index":0,"text":"configure retry = {count: 3, interval: 3000}"}},{"result":{"nanos":14129600,"millis":14.1296,"status":"passed"},"step":{"comments":["# La clase S3Util se encuentra en un gestor de librerías externo al proyecto","# Imaginemos que esta clase contiene la configuración y conexión de un cliente AWS, además los métodos para subir archivos a buckets S3","# También contiene un método para verificar si un archivo se encuentra dentro de un folder","#    * def S3Manager = Java.type('co.cobre.lib.qa.aws.S3Util')","#    * def S3ManagerInstance = new S3Manager()","#    * def SQSManager = karate.callSingle('..\/acceptance\/test\/instances-sqs.js')"],"background":true,"line":12,"prefix":"*","index":1,"text":"def waitTime = function(seconds) { java.lang.Thread.sleep(seconds * 1000) }"}},{"result":{"nanos":48774700,"millis":48.7747,"status":"passed"},"step":{"comments":["# La clase FileUtils se encuentra en un gestor de librerías externo al proyecto","# Imaginemos que esta clase contiene métodos para tomar un archivo, renombrarlo y copiarlo en otra ruta","#    * def FileUtils = Java.type('co.cobre.lib.qa.util.FileUtils')"],"background":true,"line":16,"prefix":"*","index":2,"text":"def CommonUtils = Java.type('co.cobre.lib.qa.util.CommonUtils')"}},{"result":{"nanos":2293600,"millis":2.2936,"status":"passed"},"step":{"background":true,"line":17,"prefix":"*","index":3,"text":"def CommonFuntion = Java.type('co.cobre.lib.qa.util.CommonFuntion')"}},{"result":{"nanos":179080500,"millis":179.0805,"status":"passed"},"step":{"comments":["#    def myObjectFuntions = read('createMyObject.js')"],"background":true,"line":19,"prefix":"*","index":4,"text":"call read('createMyObject.js')"}},{"result":{"nanos":556650800,"millis":556.6508,"status":"passed"},"step":{"comments":["# --------------------------------------------------------------- #"],"line":25,"prefix":"*","index":0,"text":"def noveltyUuid = CommonUtils.generateUUID()"}},{"result":{"nanos":16889600,"millis":16.8896,"status":"passed"},"step":{"line":26,"prefix":"*","index":1,"text":"print \"El uuid de la novedad es: \" + noveltyUuid"},"stepLog":"18:57:19.803 [print] El uuid de la novedad es: 39e20c97-27d1-4ad4-808f-0c6a33388716 \n"},{"result":{"nanos":785300,"millis":0.7853,"status":"passed"},"step":{"line":27,"prefix":"*","index":2,"text":"def fullFileName = noveltyUuid+fileExtension"}},{"result":{"nanos":7760200,"millis":7.7602,"status":"passed"},"step":{"comments":["# --------------------------------------------------------------- #","#    * def renameFile = FileUtils.renameFile(currentFilePath, currentFileName, newPathNewFile, noveltyUuid, fn.fileExtension)","#    * match renameFile == true","# --------------------------------------------------------------- #"],"line":35,"prefix":"*","index":3,"text":"print \"El bucket es: \" + bucketName"},"stepLog":"18:57:19.803 [print] El bucket es: null \n"},{"result":{"nanos":818100,"millis":0.8181,"status":"passed"},"step":{"line":36,"prefix":"*","index":4,"text":"print \"El folder  es: \" + folderRecaudoFiles"},"stepLog":"18:57:19.803 [print] El folder  es: files-to-cash-in \n"},{"result":{"nanos":11649600,"errorMessage":"js failed:\n>>>>\n01: createMyObject(fullFileName, TEST01, fn.bucketName)\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"createMyObject\" is not defined\n- <js>.:program(Unnamed:1)\n\nsrc\/test\/java\/acceptance\/test\/prueba-tecnica.feature:48","millis":11.6496,"status":"failed"},"step":{"comments":["#    * S3ManagerInstance.uploadFileToBucket(karate.bucketName, fn.folderRecaudoFiles, fullFileName, newPathNewFile)","#    * waitTime(3)","# --------------------------------------------------------------- #","#    * def fileExist = S3ManagerInstance.doesFileExist(bucketName, folderRecaudoFiles, fullFileName)","#    * print \"La existencia del archivo es: \" + fileExist","#    * match fileExist == true","# --------------------------------------------------------------- #"],"line":48,"prefix":"*","index":5,"text":"def variableMapToReplaceInQueueMessageBody = createMyObject(fullFileName, TEST01, fn.bucketName)"},"stepLog":"18:57:19.818 src\/test\/java\/acceptance\/test\/prueba-tecnica.feature:48\n* def variableMapToReplaceInQueueMessageBody = createMyObject(fullFileName, TEST01, fn.bucketName)\njs failed:\n>>>>\n01: createMyObject(fullFileName, TEST01, fn.bucketName)\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"createMyObject\" is not defined\n- <js>.:program(Unnamed:1)\n\nsrc\/test\/java\/acceptance\/test\/prueba-tecnica.feature:48\n"},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":49,"prefix":"*","index":6,"text":"print \"el valor es: \" + variableMapToReplaceInQueueMessageBody"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["#    * SQSManager.sendMessageToQueue('<jsonFileSqsEvents>', 'testing-recaudo-qa.fifo', variableMapToReplaceInQueueMessageBody, '<pathJsonFileSqsEvents>')","#    * waitTime(8)","# --------------------------------------------------------------- #","# Uso de API REST para obtener información de las novedades"],"line":55,"prefix":"Given","index":7,"text":"url baseUrl + noveltyUuid"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":56,"prefix":"And","index":8,"text":"header X-WorkplaceBankCode = 'TEST01'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":57,"prefix":"And","index":9,"text":"retry until responseStatus == 200 && response.cashInNovelty.status == status && response.cashInNoveltyDetailsCounters.total == total"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":58,"prefix":"When","index":10,"text":"method get"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":59,"prefix":"Then","index":11,"text":"status 200"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":60,"prefix":"*","index":12,"text":"def totalAmount = response.cashInNovelty.totalAmount"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":61,"prefix":"*","index":13,"text":"def status = response.cashInNovelty.status"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":62,"prefix":"*","index":14,"text":"def totalNovelties = response.cashInNoveltyDetailsCounters.total"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":63,"prefix":"*","index":15,"text":"def validationError = response.cashInNoveltyDetailsCounters.validationError"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":64,"prefix":"*","index":16,"text":"def created = response.cashInNoveltyDetailsCounters.created#    * match totalAmount == '<>'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":66,"prefix":"*","index":17,"text":"def validateResult = CommonFuntion.validateNovelty(response, totalAmount, status, totalNovelties, validationError, created)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":68,"prefix":"*","index":18,"text":"match getNovelty.status == 'VALIDATED'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":69,"prefix":"*","index":19,"text":"match getNovelty.totalNovelties == '3'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":70,"prefix":"*","index":20,"text":"match getNovelty.validationError == '0'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":71,"prefix":"*","index":21,"text":"match getNovelty.created == '3'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":72,"prefix":"*","index":22,"text":"waitTime(3)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# --------------------------------------------------------------- #","# Uso de API REST para obtener información de las novelty-details"],"line":76,"prefix":"*","index":23,"text":"def dataWithExpectedInformation = karate.read(\"classpath:acceptance\/test\/\" + 'respuestaEsperadaDatosCorrectos.json')"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":77,"prefix":"*","index":24,"text":"def pageInt = parseInt('1')"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":78,"prefix":"*","index":25,"text":"def sizeInt = parseInt('3')"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":79,"prefix":"Given","index":26,"text":"url 'https:\/\/test-container-qa.prueba.co\/v1\/entity\/novelties\/'+noveltyUuid+''+'\/novelty-details'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":80,"prefix":"And","index":27,"text":"header X-WorkplaceBankCode = 'TEST01'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":81,"prefix":"And","index":28,"text":"params {page: '0', size: '100'}"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":82,"prefix":"And","index":29,"text":"retry until responseStatus == 200 && response.content != []"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":83,"prefix":"When","index":30,"text":"method get"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":84,"prefix":"Then","index":31,"text":"status 200"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":85,"prefix":"*","index":32,"text":"def content = response.content"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":86,"prefix":"*","index":33,"text":"match getNoveltyDetails.content contains deep dataWithExpectedInformation"}}],"line":90,"description":"","durationMillis":926.3552,"failed":true,"error":"js failed:\n>>>>\n01: createMyObject(fullFileName, TEST01, fn.bucketName)\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"createMyObject\" is not defined\n- <js>.:program(Unnamed:1)\n\nsrc\/test\/java\/acceptance\/test\/prueba-tecnica.feature:48","tags":["regression"],"executorName":"main","name":"Dado que se carga un archivo de recaudo con datos correctamente con usuarios que recibirán un link de pago, al procesarse el archivo se persisten en BD los recaudo creados exitosamente","startTime":1710979038719,"refId":"[1.1:90]","endTime":1710979039818,"exampleData":{"clientCode":"TEST01","pathJsonFileSqsEvents":"src\/test\/java\/acceptance\/test\/","jsonFileSqsEvents":"queueEvent.json","currentFilePath":"src\/test\/java\/acceptance\/test\/","currentFileName":"recaudoTemplateDatosCorrectos.csv","newPathNewFile":"src\/test\/resources\/testFilesToUse\/","pathJsonDataWithExpectedInformation":"src\/test\/java\/acceptance\/test\/","jsonDataWithExpectedInformation":"respuestaEsperadaDatosCorrectos.json","noveltyStatus":"VALIDATED","registerTotal":"3","validationErrorNumber":"'0'","createdNumber":"'3'","page":"1","size":"3"},"exampleIndex":0}],"callDepth":0,"name":"sample karate test script","description":"","resultDate":"2024-03-20 06:57:19 PM","durationMillis":926.3552,"passedCount":0}